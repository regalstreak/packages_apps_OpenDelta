<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 25.1.1 rc1">

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit()"
        errorLine2="        ^"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/Config.java"
            line="216"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putBoolean(PREF_SHOWN_RECOVERY_WARNING_SECURE_NAME, true)"
        errorLine2="        ^"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/Config.java"
            line="246"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit()"
        errorLine2="        ^"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/Config.java"
            line="256"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putBoolean(SettingsActivity.PREF_START_HINT_SHOWN, true).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/MainActivity.java"
            line="436"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit()"
        errorLine2="        ^"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/MainActivity.java"
            line="536"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                    prefs.edit()"
        errorLine2="                    ^"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/Scheduler.java"
            line="167"
            column="21"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="            prefs.edit().putBoolean(PREF_START_HINT_SHOWN, false).commit();"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/SettingsActivity.java"
            line="191"
            column="13"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                        prefs.edit()"
        errorLine2="                        ^"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/SettingsActivity.java"
            line="279"
            column="25"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putString(PREF_SCHEDULER_DAILY_TIME, prefValue).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/SettingsActivity.java"
            line="293"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                prefs.edit().putLong(PREF_LAST_SNOOZE_TIME_NAME,"
        errorLine2="                ^"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="321"
            column="17"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                    prefs.edit().putString(PREF_SNOOZE_UPDATE_NAME, lastBuild).commit();"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="327"
            column="21"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="            prefs.edit().putString(PREF_READY_FILENAME_NAME, fn).commit();"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1366"
            column="13"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putString(PREF_LATEST_FULL_NAME, PREF_READY_FILENAME_DEFAULT).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1788"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putString(PREF_LATEST_DELTA_NAME, PREF_READY_FILENAME_DEFAULT).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1789"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putString(PREF_READY_FILENAME_NAME, PREF_READY_FILENAME_DEFAULT).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1790"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putLong(PREF_DOWNLOAD_SIZE, -1).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1791"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putBoolean(PREF_DELTA_SIGNATURE, false).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1792"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="        prefs.edit().putString(PREF_INITIAL_FILE, PREF_READY_FILENAME_DEFAULT).commit();"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1793"
            column="9"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                    prefs.edit().putString(PREF_LATEST_FULL_NAME, latestFullBuild).commit();"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1859"
            column="21"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                                    prefs.edit().putBoolean(PREF_DELTA_SIGNATURE, signedFile).commit();"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1937"
            column="37"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                            prefs.edit().putString(PREF_READY_FILENAME_NAME, flashFilename).commit();"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1958"
            column="29"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                            prefs.edit().putString(PREF_LATEST_FULL_NAME, PREF_READY_FILENAME_DEFAULT).commit();"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1970"
            column="29"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                                    prefs.edit().putString(PREF_READY_FILENAME_NAME, fn).commit();"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1978"
            column="37"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                            prefs.edit().putLong(PREF_DOWNLOAD_SIZE, size).commit();"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="1987"
            column="29"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                            prefs.edit().putString(PREF_LATEST_DELTA_NAME, PREF_READY_FILENAME_DEFAULT).commit();"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="2038"
            column="29"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                            prefs.edit().putString(PREF_LATEST_FULL_NAME, PREF_READY_FILENAME_DEFAULT).commit();"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="2039"
            column="29"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                                prefs.edit().putString(PREF_LATEST_DELTA_NAME, PREF_READY_FILENAME_DEFAULT).commit();"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="2042"
            column="33"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                                prefs.edit().putString(PREF_LATEST_DELTA_NAME, new File(flashFilename).getName()).commit();"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="2044"
            column="33"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                                    prefs.edit().putString(PREF_READY_FILENAME_NAME, fn).commit();"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="2053"
            column="37"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                                prefs.edit().putLong(PREF_DOWNLOAD_SIZE, deltaDownloadSize).commit();"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="2062"
            column="33"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                                prefs.edit().putLong(PREF_DOWNLOAD_SIZE, fullDownloadSize).commit();"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="2064"
            column="33"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                                    prefs.edit().putString(PREF_INITIAL_FILE, initialFile).commit();"
        errorLine2="                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="2120"
            column="37"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                            prefs.edit().putBoolean(PREF_DELTA_SIGNATURE, true).commit();"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="2123"
            column="29"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                            prefs.edit().putString(PREF_READY_FILENAME_NAME, flashFilename).commit();"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="2124"
            column="29"/>
    </issue>

    <issue
        id="CommitPrefEdits"
        severity="Warning"
        message="Consider using `apply()` instead; `commit` writes its data to persistent storage immediately, whereas `apply` will handle it in the background"
        category="Correctness"
        priority="6"
        summary="Missing `commit()` on `SharedPreference` editor"
        explanation="After calling `edit()` on a `SharedPreference`, you must call `commit()` or `apply()` on the editor to save the results."
        errorLine1="                    prefs.edit().putLong(PREF_LAST_CHECK_TIME_NAME, System.currentTimeMillis()).commit();"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/UpdateService.java"
            line="2140"
            column="21"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag `LinearLayout`"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="        &lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="14"
            column="23"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag `LinearLayout`"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="            xmlns:tools=&quot;http://schemas.android.com/tools&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="15"
            column="13"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag `LinearLayout`"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="            xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="16"
            column="13"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag `GridLayout`"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="  &lt;GridLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;"
        errorLine2="              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="52"
            column="15"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag `GridLayout`"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="            xmlns:tools=&quot;http://schemas.android.com/tools&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="53"
            column="13"/>
    </issue>

    <issue
        id="MissingPrefix"
        severity="Error"
        message="Unexpected namespace prefix &quot;xmlns&quot; found for tag `GridLayout`"
        category="Correctness"
        priority="6"
        summary="Missing Android XML namespace"
        explanation="Most Android views have attributes in the Android namespace. When referencing these attributes you *must* include the namespace prefix, or your attribute will be interpreted by `aapt` as just a custom attribute.

Similarly, in manifest files, nearly all attributes should be in the `android:` namespace."
        errorLine1="            xmlns:card_view=&quot;http://schemas.android.com/apk/res-auto&quot;"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio,adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="54"
            column="13"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                    SimpleDateFormat format = new SimpleDateFormat(&quot;kk:mm&quot;);"
        errorLine2="                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/Scheduler.java"
            line="266"
            column="47"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).

Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="                    SimpleDateFormat format = new SimpleDateFormat(&quot;EEEE, MMMM d, yyyy &apos;at&apos; kk:mm&quot;);"
        errorLine2="                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/Scheduler.java"
            line="290"
            column="47"/>
    </issue>

    <issue
        id="ProtectedPermissions"
        severity="Error"
        message="Permission is only granted to system apps"
        category="Correctness"
        priority="5"
        summary="Using system app permission"
        explanation="Permissions with the protection level signature or signatureOrSystem are only granted to system apps. If an app is a regular non-system app, it will never be able to use these permissions."
        errorLine1=" &lt;uses-permission android:name=&quot;android.permission.ACCESS_CACHE_FILESYSTEM&quot; />"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/AndroidManifest.xml"
            line="18"
            column="19"/>
    </issue>

    <issue
        id="ProtectedPermissions"
        severity="Error"
        message="Permission is only granted to system apps"
        category="Correctness"
        priority="5"
        summary="Using system app permission"
        explanation="Permissions with the protection level signature or signatureOrSystem are only granted to system apps. If an app is a regular non-system app, it will never be able to use these permissions."
        errorLine1=" &lt;uses-permission android:name=&quot;android.permission.REBOOT&quot; />"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/AndroidManifest.xml"
            line="19"
            column="19"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.tools.build:gradle than 2.0.0-rc3 is available: 2.0.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="        classpath &apos;com.android.tools.build:gradle:2.0.0-rc3&apos;"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/build.gradle"
            line="6"
            column="9"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                    android:textSize=&quot;15dp&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="72"
            column="21"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                    android:textSize=&quot;14dp&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="80"
            column="21"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                        android:textSize=&quot;15dp&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="85"
            column="25"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                        android:textSize=&quot;14dp&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="97"
            column="25"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                    android:textSize=&quot;15dp&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="112"
            column="21"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                    android:textSize=&quot;14dp&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="121"
            column="21"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                        android:textSize=&quot;15dp&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="124"
            column="25"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                        android:textSize=&quot;14dp&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="136"
            column="25"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                    android:textSize=&quot;15dp&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="155"
            column="21"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                        android:textSize=&quot;15dp&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="163"
            column="25"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                    android:textSize=&quot;14dp&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="164"
            column="21"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                        android:textSize=&quot;14dp&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="175"
            column="25"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                    android:textSize=&quot;15dp&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="194"
            column="21"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                        android:textSize=&quot;15dp&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="202"
            column="25"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                    android:textSize=&quot;14dp&quot;"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="206"
            column="21"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                        android:textSize=&quot;14dp&quot;"
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="214"
            column="25"/>
    </issue>

    <issue
        id="SpUsage"
        severity="Warning"
        message="Should use &quot;`sp`&quot; instead of &quot;`dp`&quot; for text sizes"
        category="Correctness"
        priority="3"
        summary="Using `dp` instead of `sp` for text sizes"
        explanation="When setting text sizes, you should normally use `sp`, or &quot;scale-independent pixels&quot;. This is like the `dp` unit, but it is also scaled by the user&apos;s font size preference. It is recommend you use this unit when specifying font sizes, so they will be adjusted for both the screen density and the user&apos;s preference.

There *are* cases where you might need to use `dp`; typically this happens when the text is in a container with a specific dp-size. This will prevent the text from spilling outside the container. Note however that this means that the user&apos;s font size settings are not respected, so consider adjusting the layout itself to be more flexible."
        url="http://developer.android.com/training/multiscreen/screendensities.html"
        urls="http://developer.android.com/training/multiscreen/screendensities.html"
        errorLine1="                        android:textSize=&quot;14dp&quot;                        "
        errorLine2="                        ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="237"
            column="25"/>
    </issue>

    <issue
        id="StringFormatInvalid"
        severity="Error"
        message="Format string &apos;`url_base_delta`&apos; is not a valid format string so it should not be passed to `String.format`"
        category="Correctness:Messages"
        priority="9"
        summary="Invalid format string"
        explanation="If a string contains a &apos;%&apos; character, then the string may be a formatting string which will be passed to `String.format` from Java code to replace each &apos;%&apos; occurrence with specific values.

This lint warning checks for two related problems:
(1) Formatting strings that are invalid, meaning that `String.format` will throw exceptions at runtime when attempting to use the format string.
(2) Strings containing &apos;%&apos; that are not formatting strings getting passed to a `String.format` call. In this case the &apos;%&apos; will need to be escaped as &apos;%%&apos;.

NOTE: Not all Strings which look like formatting strings are intended for use by `String.format`; for example, they may contain date formats intended for `android.text.format.Time#format()`. Lint cannot always figure out that a String is a date format, so you may get false warnings in those scenarios. See the suppress help topic for information on how to suppress errors in that case."
        errorLine1="        url_base_delta = String.format(Locale.ENGLISH,"
        errorLine2="                         ^">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/Config.java"
            line="108"
            column="26"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="20"
            column="2"/>
    </issue>

    <issue
        id="StringFormatInvalid"
        severity="Error"
        message="Format string &apos;`url_base_update`&apos; is not a valid format string so it should not be passed to `String.format`"
        category="Correctness:Messages"
        priority="9"
        summary="Invalid format string"
        explanation="If a string contains a &apos;%&apos; character, then the string may be a formatting string which will be passed to `String.format` from Java code to replace each &apos;%&apos; occurrence with specific values.

This lint warning checks for two related problems:
(1) Formatting strings that are invalid, meaning that `String.format` will throw exceptions at runtime when attempting to use the format string.
(2) Strings containing &apos;%&apos; that are not formatting strings getting passed to a `String.format` call. In this case the &apos;%&apos; will need to be escaped as &apos;%%&apos;.

NOTE: Not all Strings which look like formatting strings are intended for use by `String.format`; for example, they may contain date formats intended for `android.text.format.Time#format()`. Lint cannot always figure out that a String is a date format, so you may get false warnings in those scenarios. See the suppress help topic for information on how to suppress errors in that case."
        errorLine1="        url_base_update = String.format(Locale.ENGLISH,"
        errorLine2="                          ^">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/Config.java"
            line="110"
            column="27"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="23"
            column="2"/>
    </issue>

    <issue
        id="StringFormatInvalid"
        severity="Error"
        message="Format string &apos;`url_base_full`&apos; is not a valid format string so it should not be passed to `String.format`"
        category="Correctness:Messages"
        priority="9"
        summary="Invalid format string"
        explanation="If a string contains a &apos;%&apos; character, then the string may be a formatting string which will be passed to `String.format` from Java code to replace each &apos;%&apos; occurrence with specific values.

This lint warning checks for two related problems:
(1) Formatting strings that are invalid, meaning that `String.format` will throw exceptions at runtime when attempting to use the format string.
(2) Strings containing &apos;%&apos; that are not formatting strings getting passed to a `String.format` call. In this case the &apos;%&apos; will need to be escaped as &apos;%%&apos;.

NOTE: Not all Strings which look like formatting strings are intended for use by `String.format`; for example, they may contain date formats intended for `android.text.format.Time#format()`. Lint cannot always figure out that a String is a date format, so you may get false warnings in those scenarios. See the suppress help topic for information on how to suppress errors in that case."
        errorLine1="        url_base_full = String.format(Locale.ENGLISH,"
        errorLine2="                        ^">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/Config.java"
            line="112"
            column="25"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="26"
            column="2"/>
    </issue>

    <issue
        id="StringFormatInvalid"
        severity="Error"
        message="Format string &apos;`last_checked`&apos; is not a valid format string so it should not be passed to `String.format`"
        category="Correctness:Messages"
        priority="9"
        summary="Invalid format string"
        explanation="If a string contains a &apos;%&apos; character, then the string may be a formatting string which will be passed to `String.format` from Java code to replace each &apos;%&apos; occurrence with specific values.

This lint warning checks for two related problems:
(1) Formatting strings that are invalid, meaning that `String.format` will throw exceptions at runtime when attempting to use the format string.
(2) Strings containing &apos;%&apos; that are not formatting strings getting passed to a `String.format` call. In this case the &apos;%&apos; will need to be escaped as &apos;%%&apos;.

NOTE: Not all Strings which look like formatting strings are intended for use by `String.format`; for example, they may contain date formats intended for `android.text.format.Time#format()`. Lint cannot always figure out that a String is a date format, so you may get false warnings in those scenarios. See the suppress help topic for information on how to suppress errors in that case."
        errorLine1="                    return getString("
        errorLine2="                           ^">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/MainActivity.java"
            line="167"
            column="28"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="41"
            column="2"/>
    </issue>

    <issue
        id="StringFormatInvalid"
        severity="Error"
        message="Format string &apos;`last_checked`&apos; is not a valid format string so it should not be passed to `String.format`"
        category="Correctness:Messages"
        priority="9"
        summary="Invalid format string"
        explanation="If a string contains a &apos;%&apos; character, then the string may be a formatting string which will be passed to `String.format` from Java code to replace each &apos;%&apos; occurrence with specific values.

This lint warning checks for two related problems:
(1) Formatting strings that are invalid, meaning that `String.format` will throw exceptions at runtime when attempting to use the format string.
(2) Strings containing &apos;%&apos; that are not formatting strings getting passed to a `String.format` call. In this case the &apos;%&apos; will need to be escaped as &apos;%%&apos;.

NOTE: Not all Strings which look like formatting strings are intended for use by `String.format`; for example, they may contain date formats intended for `android.text.format.Time#format()`. Lint cannot always figure out that a String is a date format, so you may get false warnings in those scenarios. See the suppress help topic for information on how to suppress errors in that case."
        errorLine1="                            getString(R.string.last_checked,"
        errorLine2="                            ^">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/MainActivity.java"
            line="181"
            column="29"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="41"
            column="2"/>
    </issue>

    <issue
        id="StringFormatInvalid"
        severity="Error"
        message="Format string &apos;`error_disk_space_sub`&apos; is not a valid format string so it should not be passed to `String.format`"
        category="Correctness:Messages"
        priority="9"
        summary="Invalid format string"
        explanation="If a string contains a &apos;%&apos; character, then the string may be a formatting string which will be passed to `String.format` from Java code to replace each &apos;%&apos; occurrence with specific values.

This lint warning checks for two related problems:
(1) Formatting strings that are invalid, meaning that `String.format` will throw exceptions at runtime when attempting to use the format string.
(2) Strings containing &apos;%&apos; that are not formatting strings getting passed to a `String.format` call. In this case the &apos;%&apos; will need to be escaped as &apos;%%&apos;.

NOTE: Not all Strings which look like formatting strings are intended for use by `String.format`; for example, they may contain date formats intended for `android.text.format.Time#format()`. Lint cannot always figure out that a String is a date format, so you may get false warnings in those scenarios. See the suppress help topic for information on how to suppress errors in that case."
        errorLine1="                extraText = getString(R.string.error_disk_space_sub, current,"
        errorLine2="                            ^">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/MainActivity.java"
            line="242"
            column="29"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="38"
            column="2"/>
    </issue>

    <issue
        id="StringFormatInvalid"
        severity="Error"
        message="Format string &apos;`state_error_not_official_extra`&apos; is not a valid format string so it should not be passed to `String.format`"
        category="Correctness:Messages"
        priority="9"
        summary="Invalid format string"
        explanation="If a string contains a &apos;%&apos; character, then the string may be a formatting string which will be passed to `String.format` from Java code to replace each &apos;%&apos; occurrence with specific values.

This lint warning checks for two related problems:
(1) Formatting strings that are invalid, meaning that `String.format` will throw exceptions at runtime when attempting to use the format string.
(2) Strings containing &apos;%&apos; that are not formatting strings getting passed to a `String.format` call. In this case the &apos;%&apos; will need to be escaped as &apos;%%&apos;.

NOTE: Not all Strings which look like formatting strings are intended for use by `String.format`; for example, they may contain date formats intended for `android.text.format.Time#format()`. Lint cannot always figure out that a String is a date format, so you may get false warnings in those scenarios. See the suppress help topic for information on how to suppress errors in that case."
        errorLine1="                extraText = getString(R.string.state_error_not_official_extra,"
        errorLine2="                            ^">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/MainActivity.java"
            line="251"
            column="29"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="59"
            column="2"/>
    </issue>

    <issue
        id="StringFormatInvalid"
        severity="Error"
        message="Format string &apos;`clean_files_feedback`&apos; is not a valid format string so it should not be passed to `String.format`"
        category="Correctness:Messages"
        priority="9"
        summary="Invalid format string"
        explanation="If a string contains a &apos;%&apos; character, then the string may be a formatting string which will be passed to `String.format` from Java code to replace each &apos;%&apos; occurrence with specific values.

This lint warning checks for two related problems:
(1) Formatting strings that are invalid, meaning that `String.format` will throw exceptions at runtime when attempting to use the format string.
(2) Strings containing &apos;%&apos; that are not formatting strings getting passed to a `String.format` call. In this case the &apos;%&apos; will need to be escaped as &apos;%%&apos;.

NOTE: Not all Strings which look like formatting strings are intended for use by `String.format`; for example, they may contain date formats intended for `android.text.format.Time#format()`. Lint cannot always figure out that a String is a date format, so you may get false warnings in those scenarios. See the suppress help topic for information on how to suppress errors in that case."
        errorLine1="            Toast.makeText(this, String.format(getString(R.string.clean_files_feedback), numDeletedFiles), Toast.LENGTH_LONG).show();"
        errorLine2="                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/SettingsActivity.java"
            line="192"
            column="34"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="106"
            column="2"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`property_version`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;cs&quot; (Czech), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;uk&quot; (Ukrainian), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;property_version&quot;>ro.rr.version&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="8"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`property_device`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;cs&quot; (Czech), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;uk&quot; (Ukrainian), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;property_device&quot;>ro.rr.device&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="11"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`filename_base`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;cs&quot; (Czech), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;uk&quot; (Ukrainian), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;filename_base&quot;>%s&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="14"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`path_base`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;cs&quot; (Czech), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;uk&quot; (Ukrainian), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;path_base&quot;>OpenDelta&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="17"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`url_base_delta`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;cs&quot; (Czech), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;uk&quot; (Ukrainian), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;url_base_delta&quot;>http://downloads.regalstreak.me/oneplus2/ROMs/Resurrection-Remix-6.x/Delta/&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="20"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`url_base_update`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;cs&quot; (Czech), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;uk&quot; (Ukrainian), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;url_base_update&quot;>http://downloads.regalstreak.me/oneplus2/ROMs/Resurrection-Remix-6.x/Delta/&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="23"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`url_base_full`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;cs&quot; (Czech), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;uk&quot; (Ukrainian), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;url_base_full&quot;>http://downloads.regalstreak.me/oneplus2/ROMs/Resurrection-Remix-6.x/Full/&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="26"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`url_base_json`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;cs&quot; (Czech), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;uk&quot; (Ukrainian), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;url_base_json&quot;>http://downloads.regalstreak.me/oneplus2/ROMs/Resurrection-Remix-6.x/Full/json.php&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="29"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`inject_signature_keys`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;cs&quot; (Czech), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;uk&quot; (Ukrainian), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;inject_signature_keys&quot;>&lt;![CDATA[v2 {64,0x9d3ef4e7,{3451855145,2574857780,2212470067,2065828617,2220798544,1453138002,3035953543,349537325,3471576065,3709424322,1499657722,626083680,3508502098,135982109,2406850010,2674691998,3903782739,3673009508,3196976129,124737966,3727608735,3698514242,2926317182,2598715876,2200551045,3324466456,2027872794,1316834497,3538558575,4094723182,3091112109,152419065,961268200,2817719766,2542630774,735678394,2025086356,3319743251,3482513753,3754037486,2186326636,2162920719,1933319201,1362420666,3093979107,3944963833,3173846995,3307766644,4239176696,3380551792,3189093155,3679104199,4159403556,3373361362,737822358,2043192588,3446724037,2184123451,3680508975,492248740,1654088879,3739912969,188663922,4074712169},{2400585854,3884144496,312737665,3547448515,3596760612,2953776441,190371072,1980790627,3681130262,827104214,1597200957,1333455720,1391423898,4233042842,3284284880,50168935,2424437529,2771213818,3715896496,3320142743,3649069246,2702994054,839870558,1257344415,3116165843,4195920375,2497396347,1334871168,3550010104,64795091,3042249326,4155098628,123980023,3500559217,1825888674,443352554,3891428201,2484397377,4136956616,4201065713,2547196505,3411971111,2135688607,393830937,4198844531,3826748593,3979050977,1220766766,3592470842,2278136,1841247501,3507376964,3313320668,3849023694,2185649624,3043141327,1601153541,939583339,2083130022,3508853409,2068728550,3713282728,2402412627,1764295415}}]]>&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="38"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`keep_screen_on_devices`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;cs&quot; (Czech), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;uk&quot; (Ukrainian), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string-array name=&quot;keep_screen_on_devices&quot;>"
        errorLine2="               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="51"
            column="16"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`official_version_tag`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;cs&quot; (Czech), &quot;da&quot; (Danish), &quot;de&quot; (German), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;hu&quot; (Hungarian), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;uk&quot; (Ukrainian), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;official_version_tag&quot;>NIGHTLY&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/config.xml"
            line="57"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`app_name`&quot; is not translated in &quot;sv&quot; (Swedish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;app_name&quot;>OpenDelta&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="4"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_networks`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;title_networks&quot;>Auto download networks&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="7"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`network_2g`&quot; is not translated in &quot;sv&quot; (Swedish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;network_2g&quot;>2G&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="8"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`network_3g`&quot; is not translated in &quot;sv&quot; (Swedish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;network_3g&quot;>3G&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="9"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`network_4g`&quot; is not translated in &quot;sv&quot; (Swedish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;network_4g&quot;>4G&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="10"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`network_wifi`&quot; is not translated in &quot;sv&quot; (Swedish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;network_wifi&quot;>Wi-Fi&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="11"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`network_ethernet`&quot; is not translated in &quot;sv&quot; (Swedish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;network_ethernet&quot;>Ethernet&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="12"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`about_content`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;about_content&quot;>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="15"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`state_action_none`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;state_action_none&quot;>Your system is up to date.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="26"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`state_action_ready`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;state_action_ready&quot;>Update ready to flash.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="35"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`state_error_disk_space`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;state_error_disk_space&quot;>Not enough disk space!&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="36"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`state_error_unknown`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;state_error_unknown&quot;>Unknown error.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="37"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`notify_checking`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;notify_checking&quot;>Checking for update &amp;#8230;&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="40"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`last_checked`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;last_checked&quot; formatted=&quot;false&quot;>%s at %s&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="41"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`last_checked_never`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;last_checked_never&quot;>We\&apos;ve never checked, maybe you would like to do so?&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="42"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`button_check_now`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;button_check_now&quot;>Check for update&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="43"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`button_flash_now`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;button_flash_now&quot;>Flash&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="44"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_secure_mode`&quot; is not translated in &quot;da&quot; (Danish), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;action_secure_mode&quot;>Secure&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="48"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`secure_mode_enabled_title`&quot; is not translated in &quot;da&quot; (Danish), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;secure_mode_enabled_title&quot;>Secure mode: enabled&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="49"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`secure_mode_enabled_description`&quot; is not translated in &quot;da&quot; (Danish), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;secure_mode_enabled_description&quot;>&lt;![CDATA[The update\&apos;s cryptographic signature will be verified before flashing to confirm its origin, and no additional updates will be flashed. This mode is only compatible with &lt;b>TWRP&lt;/b>.]]>&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="50"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`secure_mode_disabled_title`&quot; is not translated in &quot;da&quot; (Danish), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;secure_mode_disabled_title&quot;>Secure mode: disabled&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="51"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`secure_mode_disabled_description`&quot; is not translated in &quot;da&quot; (Danish), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;secure_mode_disabled_description&quot;>&lt;![CDATA[Additional updates are flashed if present. Note that any (malicious) software package can place these updates and gain full system access. Caution is advised.]]>&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="52"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`recovery_notice_title`&quot; is not translated in &quot;da&quot; (Danish), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;recovery_notice_title&quot;>Notice&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="53"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`recovery_notice_description_secure`&quot; is not translated in &quot;da&quot; (Danish), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;recovery_notice_description_secure&quot;>&lt;![CDATA[Flashing updates in the current mode is only supported on &lt;b>TWRP&lt;/b> recoveries. Please make sure you are running a compatible recovery before continuing.]]>&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="54"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`recovery_notice_description_not_secure`&quot; is not translated in &quot;da&quot; (Danish), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;recovery_notice_description_not_secure&quot;>&lt;![CDATA[Flashing updates in the current mode is only officially supported on &lt;b>TWRP&lt;/b> recoveries. &lt;i>Official&lt;/i> &lt;b>CWM&lt;/b> builds are &lt;i>not&lt;/i> supported, though some &lt;i>community-built&lt;/i> versions of &lt;b>CWM&lt;/b> &lt;i>may&lt;/i> still work. Please make sure you are running a compatible recovery before continuing.]]>&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="55"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`flash_after_update_notice_title`&quot; is not translated in &quot;da&quot; (Danish), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;flash_after_update_notice_title&quot;>Notice&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="56"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`flash_after_update_notice_description`&quot; is not translated in &quot;da&quot; (Danish), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;flash_after_update_notice_description&quot;>&lt;![CDATA[Additional updates are present in the &lt;b>FlashAfterUpdate&lt;/b> folder, but secure mode is enabled. If you continue, these additional updates will &lt;b>not&lt;/b> be flashed.]]>&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="57"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`state_error_not_official_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;state_error_not_official_title&quot;>Update disabled.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="58"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`state_error_not_official_extra`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;state_error_not_official_extra&quot; formatted=&quot;false&quot;>Update of %s not possible&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="59"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`button_build_delta`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;button_build_delta&quot;>Download&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="60"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`button_stop`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;button_stop&quot;>Stop&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="61"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`state_action_build`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;state_action_build&quot;>Update available.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="62"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`state_action_build_delta`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;state_action_build_delta&quot;>Delta update possible.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="63"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`state_action_build_full`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;state_action_build_full&quot;>Full update possible.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="64"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`state_error_download`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;state_error_download&quot;>Download problem.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="65"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`text_current_version_header_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;text_current_version_header_title&quot;>Current Version&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="66"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`text_last_checked_header_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;text_last_checked_header_title&quot;>Last Checked&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="67"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`text_update_version_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;text_update_version_title&quot;>Update Version&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="68"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`text_download_size_header_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;text_download_size_header_title&quot;>Download Size&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="69"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`text_download_size_unknown`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;text_download_size_unknown&quot;>Unknown&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="70"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`auto_download`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;auto_download&quot;>Schedule&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="71"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`auto_download_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;auto_download_title&quot;>Scheduler action&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="72"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`download_disabled`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;download_disabled&quot;>Disabled&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="73"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`check_only`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;check_only&quot;>Check and notify&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="74"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`download_delta`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;download_delta&quot;>Auto download delta&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="75"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`download_full`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;download_full&quot;>Auto download all&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="76"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`menu_settings`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;menu_settings&quot;>Settings&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="77"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`category_download`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;category_download&quot;>Auto download&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="78"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`charge_only_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;charge_only_title&quot;>Charger only&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="79"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`charge_only_message`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;charge_only_message&quot;>Download only when on charger&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="80"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`battery_level_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;battery_level_title&quot;>Min battery percent&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="81"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`twenty_five_percent`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;twenty_five_percent&quot;>25&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="82"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`fifty_percent`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;fifty_percent&quot;>50;&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="83"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`seventy_five_percent`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;seventy_five_percent&quot;>75&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="84"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`notify_title_error`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;notify_title_error&quot;>Problem checking for update&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="85"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`notify_title_flash`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;notify_title_flash&quot;>Update ready to flash&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="86"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`notify_title_download`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;notify_title_download&quot;>Update ready to download&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="87"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`last_checked_never_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;last_checked_never_title&quot;>Press \&apos;Check for update\&apos;&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="88"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`screen_state_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;screen_state_title&quot;>Screen off&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="89"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`screen_state_message`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;screen_state_message&quot;>Download only when screen is off&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="90"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`category_scheduler`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;category_scheduler&quot;>Auto update&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="91"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`scheduler_mode_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;scheduler_mode_title&quot;>Scheduler mode&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="92"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`scheduler_smart`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;scheduler_smart&quot;>Smart&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="93"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`scheduler_daily`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;scheduler_daily&quot;>Daily&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="94"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`scheduler_weekly`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;scheduler_weekly&quot;>Weekly&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="95"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`scheduler_daily_time`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;scheduler_daily_time&quot;>Time&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="96"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`scheduler_week_day`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;scheduler_week_day&quot;>Day&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="97"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`networks_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;networks_title&quot;>Networks&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="98"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`networks_message`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;networks_message&quot;>Download only on networks types&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="99"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`category_flashing`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;category_flashing&quot;>Flashing&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="100"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`secure_mode_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;secure_mode_title&quot;>Secure mode&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="101"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`state_error_connection`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;state_error_connection&quot;>No data connection.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="102"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`category_admin`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;category_admin&quot;>Maintenance&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="103"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`clear_files_title`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;clear_files_title&quot;>Clean update files&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="104"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`clear_files_summary`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;clear_files_summary&quot;>Delete existing update files to force downloading full update&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="105"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`clean_files_feedback`&quot; is not translated in &quot;ca&quot; (Catalan), &quot;da&quot; (Danish), &quot;el&quot; (Greek), &quot;es&quot; (Spanish), &quot;fr&quot; (French), &quot;it&quot; (Italian), &quot;nl&quot; (Dutch), &quot;pl&quot; (Polish), &quot;pt&quot; (Portuguese), &quot;pt-PT&quot; (Portuguese: Portugal), &quot;ru&quot; (Russian), &quot;sv&quot; (Swedish), &quot;tr&quot; (Turkish), &quot;zh-CN&quot; (Chinese: China)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;clean_files_feedback&quot; formatted=&quot;false&quot;>Deleted %d files. Now press \&apos;Check for updates\&apos;&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="106"
            column="10"/>
    </issue>

    <issue
        id="Typos"
        severity="Warning"
        message="&quot;Lizensiert&quot; is a common misspelling; did you mean &quot;Lizenziert&quot; ?"
        category="Correctness:Messages"
        priority="7"
        summary="Spelling error"
        explanation="This check looks through the string definitions, and if it finds any words that look like likely misspellings, they are flagged."
        errorLine1="        Lizensiert unter den Bedingungen der &lt;b>GNU General Public License, version 3.0 (GPLv3)&lt;/b>&lt;br>"
        errorLine2="        ^"
        quickfix="studio,adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="21"
            column="9"/>
    </issue>

    <issue
        id="UnsafeProtectedBroadcastReceiver"
        severity="Warning"
        message="This broadcast receiver declares an intent-filter for a protected broadcast action string, which can only be sent by the system, not third-party applications. However, the receiver&apos;s onReceive method does not appear to call getAction to ensure that the received Intent&apos;s action string matches the expected value, potentially making it possible for another actor to send a spoofed intent with no action string or a different action string and cause undesired behavior."
        category="Security"
        priority="6"
        summary="Unsafe Protected BroadcastReceiver"
        explanation="BroadcastReceivers that declare an intent-filter for a protected-broadcast action string must check that the received intent&apos;s action string matches the expected value, otherwise it is possible for malicious actors to spoof intents."
        errorLine1="    public void onReceive(Context context, Intent intent) {"
        errorLine2="                ~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/src/com/resurrection/ota/BootCompleteReceiver.java"
            line="30"
            column="17"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.background` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/drawable/background.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.dimen.TextLarger` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;dimen name=&quot;TextLarger&quot;>28sp&lt;/dimen>"
        errorLine2="           ~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-sw600dp/dimens.xml"
            line="3"
            column="12"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.drawable.omnirom_logo` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds.">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/drawable-hdpi/omnirom_logo.png"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/drawable-mdpi/omnirom_logo.png"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/drawable-xhdpi/omnirom_logo.png"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/drawable-xxhdpi/omnirom_logo.png"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/drawable-xxxhdpi/omnirom_logo.png"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.action_networks` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;action_networks&quot;>Networks&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="6"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ca/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-da/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-el/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-es/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-it/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-nl/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="6"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt-rPT/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-sv/strings.xml"
            line="5"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-tr/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="6"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-zh-rCN/strings.xml"
            line="6"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_action_none` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_action_none&quot;>Your system is up to date.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="26"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="26"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="26"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="26"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="26"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="25"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="27"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="26"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="28"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_action_checking_md5` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_action_checking_md5&quot;>Verifying file &amp;#8230;&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="28"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ca/strings.xml"
            line="15"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="28"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-da/strings.xml"
            line="15"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="28"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-el/strings.xml"
            line="15"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-es/strings.xml"
            line="15"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="28"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="28"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-it/strings.xml"
            line="15"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-nl/strings.xml"
            line="15"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="27"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="29"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="28"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-sv/strings.xml"
            line="9"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-tr/strings.xml"
            line="15"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="30"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-zh-rCN/strings.xml"
            line="15"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_action_searching` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_action_searching&quot;>Searching for files &amp;#8230;&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="29"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ca/strings.xml"
            line="16"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="29"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-da/strings.xml"
            line="16"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="29"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-el/strings.xml"
            line="16"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-es/strings.xml"
            line="16"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="29"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="29"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-it/strings.xml"
            line="16"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-nl/strings.xml"
            line="16"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="28"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="30"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="29"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-sv/strings.xml"
            line="10"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-tr/strings.xml"
            line="16"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="31"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-zh-rCN/strings.xml"
            line="16"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_action_searching_md5` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_action_searching_md5&quot;>Verifying file &amp;#8230;&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="30"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ca/strings.xml"
            line="17"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="30"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-da/strings.xml"
            line="17"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="30"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-el/strings.xml"
            line="17"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-es/strings.xml"
            line="17"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="30"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="30"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-it/strings.xml"
            line="17"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-nl/strings.xml"
            line="17"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="29"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="31"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="30"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-sv/strings.xml"
            line="11"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-tr/strings.xml"
            line="17"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="32"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-zh-rCN/strings.xml"
            line="17"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_action_applying` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_action_applying&quot;>Patching &amp;#8230;&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="32"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ca/strings.xml"
            line="19"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="32"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-da/strings.xml"
            line="19"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="32"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-el/strings.xml"
            line="19"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-es/strings.xml"
            line="19"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="32"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="32"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-it/strings.xml"
            line="19"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-nl/strings.xml"
            line="19"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="31"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="33"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="32"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-sv/strings.xml"
            line="13"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-tr/strings.xml"
            line="19"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="34"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-zh-rCN/strings.xml"
            line="19"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_action_applying_patch` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_action_applying_patch&quot;>Patching &amp;#8230;&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="33"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ca/strings.xml"
            line="20"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="33"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-da/strings.xml"
            line="20"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="33"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-el/strings.xml"
            line="20"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-es/strings.xml"
            line="20"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="33"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="33"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-it/strings.xml"
            line="20"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-nl/strings.xml"
            line="20"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="32"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="34"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="33"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-sv/strings.xml"
            line="14"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-tr/strings.xml"
            line="20"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="35"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-zh-rCN/strings.xml"
            line="20"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_action_applying_md5` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_action_applying_md5&quot;>Verifying file &amp;#8230;&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="34"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ca/strings.xml"
            line="21"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="34"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-da/strings.xml"
            line="21"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="34"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-el/strings.xml"
            line="21"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-es/strings.xml"
            line="21"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="34"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="34"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-it/strings.xml"
            line="21"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-nl/strings.xml"
            line="21"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="33"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="35"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="34"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-sv/strings.xml"
            line="15"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-tr/strings.xml"
            line="21"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="36"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-zh-rCN/strings.xml"
            line="21"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_action_ready` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_action_ready&quot;>Update ready to flash.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="35"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="35"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="35"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="35"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="35"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="34"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="36"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="35"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="37"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_error_disk_space` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_error_disk_space&quot;>Not enough disk space!&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="36"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="36"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="36"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="36"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="36"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="35"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="37"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="36"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="38"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_error_unknown` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_error_unknown&quot;>Unknown error.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="37"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="37"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="37"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="37"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="37"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="36"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="38"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="37"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="39"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.notify_update_available` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;notify_update_available&quot;>An update is available&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="39"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ca/strings.xml"
            line="23"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="39"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-da/strings.xml"
            line="23"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="39"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-el/strings.xml"
            line="23"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-es/strings.xml"
            line="23"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="39"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="39"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-it/strings.xml"
            line="23"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-nl/strings.xml"
            line="23"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="38"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="42"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="39"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-sv/strings.xml"
            line="17"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-tr/strings.xml"
            line="23"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="41"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-zh-rCN/strings.xml"
            line="23"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.notify_checking` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;notify_checking&quot;>Checking for update &amp;#8230;&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="40"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="40"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="40"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="40"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="40"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="39"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="43"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="40"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="42"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.last_checked_never` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;last_checked_never&quot;>We\&apos;ve never checked, maybe you would like to do so?&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="42"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="42"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="42"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="42"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="42"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="41"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pt/strings.xml"
            line="46"
            column="13"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="42"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="44"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.action_secure_mode` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;action_secure_mode&quot;>Secure&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="48"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ca/strings.xml"
            line="24"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="45"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="45"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-el/strings.xml"
            line="24"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-es/strings.xml"
            line="24"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="45"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="45"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-it/strings.xml"
            line="24"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="44"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="45"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-sv/strings.xml"
            line="18"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="47"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_error_download` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_error_download&quot;>Download problem.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="65"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="62"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="62"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="62"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="62"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="61"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="62"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="64"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.auto_download` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;auto_download&quot;>Schedule&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="71"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="68"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="68"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="68"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="68"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="67"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="68"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="70"
            column="11"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.state_error_connection` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1=" &lt;string name=&quot;state_error_connection&quot;>No data connection.&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values/strings.xml"
            line="102"
            column="10"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-cs/strings.xml"
            line="99"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-de/strings.xml"
            line="99"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-fr/strings.xml"
            line="96"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-hu/strings.xml"
            line="99"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-pl/strings.xml"
            line="95"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-ru/strings.xml"
            line="96"
            column="11"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/values-uk/strings.xml"
            line="101"
            column="11"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/background.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/drawable/background.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/stat_notify_error.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/drawable/stat_notify_error.png"/>
    </issue>

    <issue
        id="IconLocation"
        severity="Warning"
        message="Found bitmap drawable `res/drawable/stat_notify_update.png` in densityless folder"
        category="Usability:Icons"
        priority="5"
        summary="Image defined in density-independent drawable folder"
        explanation="The res/drawable folder is intended for density-independent graphics such as shapes defined in XML. For bitmaps, move it to `drawable-mdpi` and consider providing higher and lower resolution versions in `drawable-ldpi`, `drawable-hdpi` and `drawable-xhdpi`. If the icon *really* is density independent (for example a solid color) you can place it in `drawable-nodpi`."
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/drawable/stat_notify_update.png"/>
    </issue>

    <issue
        id="IconDuplicates"
        severity="Warning"
        message="The following unrelated icon files have identical contents: ic_launcher.png, omnirom_logo.png"
        category="Usability:Icons"
        priority="3"
        summary="Duplicated icons under different names"
        explanation="If an icon is repeated under different names, you can consolidate and just use one of the icons and delete the others to make your application smaller. However, duplicated icons usually are not intentional and can sometimes point to icons that were accidentally overwritten or accidentally not updated.">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/drawable-hdpi/omnirom_logo.png"/>
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/drawable-hdpi/ic_launcher.png"/>
    </issue>

    <issue
        id="GoogleAppIndexingWarning"
        severity="Warning"
        message="App is not indexable by Google Search; consider adding at least one Activity with an ACTION-VIEW intent-filler. See issue explanation for more details."
        category="Usability"
        priority="5"
        summary="Missing support for Google App Indexing"
        explanation="Adds URLs to get your app into the Google index, to get installs and traffic to your app from Google Search."
        url="https://g.co/AppIndexing/AndroidStudio"
        urls="https://g.co/AppIndexing/AndroidStudio"
        errorLine1=" &lt;application"
        errorLine2=" ^"
        quickfix="studio">
        <location
            file="/home/simao/workspace/OpenDelta_RR/AndroidManifest.xml"
            line="22"
            column="2"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="   &lt;ImageView"
        errorLine2="   ^"
        quickfix="studio,adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout-land/activity_main.xml"
            line="33"
            column="4"/>
    </issue>

    <issue
        id="ContentDescription"
        severity="Warning"
        message="[Accessibility] Missing `contentDescription` attribute on image"
        category="Accessibility"
        priority="3"
        summary="Image without `contentDescription`"
        explanation="Non-textual widgets like ImageViews and ImageButtons should use the `contentDescription` attribute to specify a textual description of the widget such that screen readers and other accessibility tools can adequately describe the user interface.

Note that elements in application screens that are purely decorative and do not provide any content or enable a user action should not have accessibility content descriptions. In this case, just suppress the lint warning with a tools:ignore=&quot;ContentDescription&quot; attribute.

Note that for text fields, you should not set both the `hint` and the `contentDescription` attributes since the hint will never be shown. Just set the `hint`. See http://developer.android.com/guide/topics/ui/accessibility/checklist.html#special-cases."
        errorLine1="            &lt;ImageView"
        errorLine2="            ^"
        quickfix="studio,adt">
        <location
            file="/home/simao/workspace/OpenDelta_RR/res/layout/activity_main.xml"
            line="34"
            column="13"/>
    </issue>

    <issue
        id="RtlEnabled"
        severity="Warning"
        message="The project references RTL attributes, but does not explicitly enable or disable RTL support with `android:supportsRtl` in the manifest"
        category="Internationalization:Bidirectional Text"
        priority="3"
        summary="Using RTL attributes without enabling RTL support"
        explanation="To enable right-to-left support, when running on API 17 and higher, you must set the `android:supportsRtl` attribute in the manifest `&lt;application>` element.

If you have started adding RTL attributes, but have not yet finished the migration, you can set the attribute to false to satisfy this lint check.">
        <location
            file="/home/simao/workspace/OpenDelta_RR/AndroidManifest.xml"/>
    </issue>

</issues>
